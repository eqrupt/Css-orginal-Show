内容领域（Content Domain）
- 帖子实体（Post Entity）
  * 帖子内容（标题、正文、图片等）
  * 帖子状态（正常、删除、置顶等）
  * 帖子统计（浏览量、点赞数等）
- 评论实体（Comment Entity）
  * 评论内容
  * 评论层级关系
- 内容互动（Interaction）
  * 点赞、收藏
  * 举报处理

```javascript 

## 技术栈
- Vue3
- TypeScript
- Pinia
- bootstrap5

## 思想
- 组件化
- 数据驱动视图
- 模块化
- 组件间通信

## 实现功能
  1. 用户注册
  - 用户名/邮箱
  - 密码(二次确认)
  - 验证码

  2. 登录功能
  - 用户名/邮箱 + 密码登录
  - 记住密码
  - 手机验证码登录

  3. 安全功能
  - 密码加密
  - 登录失败限制
  - 验证码校验

## 要求
  1. 用户注册功能
  - 用户注册表单需包含以下字段:
    - 用户名(必填,4-16位字符)
    - 密码(必填,8-20位,包含大小写字母和数字)
    - 确认密码(必填,与密码一致)
    - 邮箱(必填,符合邮箱格式)

  1. 表单验证要求
  - 实时验证:
    - 用户名输入时检查是否已存在
    - 密码输入时检查强度
    - 邮箱输入时检查格式
    - 手机号输入时检查格式
  - 提交验证:
    - 所有必填项不能为空
    - 确认密码必须与密码一致
    - 验证码必须正确

  1. 交互体验
  - 表单项验证失败时实时显示错误提示
  - 提交时显示加载状态
  - 注册成功后自动登录并跳转首页
  - 注册失败显示具体错误原因





## 示例规范(非常重要，请严格遵循)
//目录结构遵守如下标准
src/
├── components/          # UI层：用户界面和交互
├── services/            # 服务层：核心业务逻辑的组织与协调
│   ├── projectA/        # 针对具体项目A的服务层模块
│   │   ├── domain/      # 核心领域逻辑，用特别简单的逻辑读取localStorage中的数据。
│   └── projectB/        # 针对具体项目B的服务层模块
├── types/               # 类型定义：DTO、通用类型等
├── store/               # 可选的状态管理层（Pinia）


凡是标注“规范”字样的内容都需要添加下面三个部分内容
1. 输出涉及到的模型，请严格遵守数据模型中的规范。
- UserDTO: { username: string; password: string }
2. 输出开发时涉及的接口
interface ILocalStorageService {
	//请把涉及到的隐藏属性值也写在这里。
  checkUsernameExists(username: string): boolean;
  createUser(userDTO: UserDTO): User;
  login(loginDTO: LoginDTO): LoginResponse;
}
3. 接口中方法引用的方法(要标注入参和返回值)
			//如果没有可以忽略这一部分，方法的含义用注释打在这里
      "checkUsernameExists(username: string): boolean": [
      //在这里要配上引用方法的入参和入参
        "localStorageService.login(loginDTO: LoginDTO): LoginResponse;",
        "localStorageService.createUser(userDTO: UserDTO): User"
      ]
//4. 不要擅自添加其他内容。输出上面内容时请把注释标上。


## 目录结构
src/
├── components/          # UI层：用户界面和交互
│   ├── post/           # 帖子相关组件
│   │   ├── PostList.vue      # 帖子列表组件
│   │   ├── PostDetail.vue    # 帖子详情组件
│   │   └── PostEditor.vue    # 帖子编辑器组件
├── services/           # 服务层：核心业务逻辑
│   ├── post/          # 帖子相关服务
│   │   ├── domain/    # 帖子领域模型和核心逻辑
│   │   │   ├── Post.ts       # 帖子实体
│   │   │   └── Comment.ts    # 评论实体
│   │   └── PostService.ts    # 帖子服务实现
├── types/             # 类型定义
│   └── post/          # 帖子相关类型
│       ├── PostandComentDTO.ts        # 帖子数据传输对象
└── store/             # 状态管理
    └── post.ts        # 帖子相关状态管理

## 数据结构
### 帖子数据模型规范

输出涉及到的模型
- PostDTO: { 
    id: string;
    title: string; 
    content: string;
    authorId: string;
    createTime: Date;
    updateTime: Date;
    comments: CommentDTO[];
}

- CommentDTO: {
    id: string;
    content: string;
    authorId: string; 
    postId: string;
    createTime: Date;
}

interface IPostService {
  // 帖子相关操作
  createPost(postDTO: PostDTO): Post;
  getPostById(id: string): Post;
  updatePost(postDTO: PostDTO): Post;
  deletePost(id: string): boolean;
  
  // 评论相关操作
  addComment(commentDTO: CommentDTO): Comment;
  deleteComment(commentId: string): boolean;
  getCommentsByPostId(postId: string): Comment[];
}

3. 接口中方法引用的方法
// createPost方法引用
"createPost(postDTO: PostDTO): Post": [
  "localStorageService.savePost(postDTO: PostDTO): void",
  "localStorageService.generateId(): string"
]

// getPostById方法引用
"getPostById(id: string): Post": [
  "localStorageService.getPost(id: string): PostDTO"
]

// updatePost方法引用
"updatePost(postDTO: PostDTO): Post": [
  "localStorageService.updatePost(postDTO: PostDTO): void"
]

// addComment方法引用
"addComment(commentDTO: CommentDTO): Comment": [
  "localStorageService.saveComment(commentDTO: CommentDTO): void",
  "localStorageService.generateId(): string"
]

---
## Comment.ts规范
输出涉及到的模型
- PostDTO: { 
    id: string;
    title: string; 
    content: string;s
    authorId: string;
    createTime: Date;
    updateTime: Date;
    comments: CommentDTO[];
}
- CommentDTO: {
    id: string;
    content: string;
    authorId: string;
    postId: string;
    createTime: Date;
}

//你需要使用localStorage，localStorage中有Posts,Posts中存储了PostDTO，PostDTO中存储了comments，comments中存储了CommentDTO。
//comment负责对一个帖子中的评论进行增删改查，方法需要读取到PostDTO的id，然后在对comments进行操作。/

interface ICommentService {
  // 评论相关操作
  addCommentToPost(postId: string, commentDTO: CommentDTO): Comment;
  updateCommentInPost(postId: string, commentDTO: CommentDTO): Comment;
  deleteCommentFromPost(postId: string, commentId: string): boolean;
  getCommentsByPostId(postId: string): Comment[];
}
